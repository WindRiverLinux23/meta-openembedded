From 0bd0d26b1ca19f9830f38b20f0711c538a0de781 Mon Sep 17 00:00:00 2001
From: Changqing Li <changqing.li@windriver.com>
Date: Thu, 7 Dec 2023 15:29:33 +0800
Subject: [PATCH 14/19] entersafe: Avoid buffer overflow during keygen

Thanks oss-fuzz

https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63104

CVE: CVE-2023-40661
Upstream-Status: Backport [ 50f0985f6343eeac4044661d56807ee9286db42c ]

Signed-off-by: Changqing Li <changqing.li@windriver.com>
---
 src/libopensc/card-entersafe.c | 57 +++++++++++++++++++++-------------
 1 file changed, 36 insertions(+), 21 deletions(-)

diff --git a/src/libopensc/card-entersafe.c b/src/libopensc/card-entersafe.c
index 24f2c758..6372913d 100644
--- a/src/libopensc/card-entersafe.c
+++ b/src/libopensc/card-entersafe.c
@@ -1361,8 +1361,9 @@ static int entersafe_gen_key(sc_card_t *card, sc_entersafe_gen_key_data *data)
 	int	r;
 	size_t len = data->key_length >> 3;
 	sc_apdu_t apdu;
-	u8 rbuf[300];
+	u8 rbuf[300] = {0};
 	u8 sbuf[4],*p;
+	size_t plen = 0;
 
 	SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 
@@ -1405,34 +1406,48 @@ static int entersafe_gen_key(sc_card_t *card, sc_entersafe_gen_key_data *data)
 	LOG_TEST_RET(card->ctx, r, "APDU transmit failed");
 	LOG_TEST_RET(card->ctx, sc_check_sw(card,apdu.sw1,apdu.sw2),"EnterSafe get pukey failed");
 
-	data->modulus = malloc(len);
-	if (!data->modulus)
-		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_OUT_OF_MEMORY);
-
-	p=rbuf;
-	if (*p!='E')
+	p = rbuf;
+	plen = apdu.resplen;
+	if (*p != 'E') {
 		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
-	p+=2+p[1];
+	}
+	if ((size_t)(p - rbuf) + 2 + p[1] >= plen) {
+		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
+	}
+	p += 2 + p[1];
 	/* N */
-	if (*p!='N')
+	if (*p != 'N') {
+		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
+	}
+	if ((size_t)(p - rbuf) + 2 >= plen) {
 		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
+	}
 	++p;
-	if(*p++>0x80)
+	if (*p++ > 0x80)
 	{
-		 u8 len_bytes=(*(p-1))&0x0f;
-		 size_t module_len=0;
-		 while(len_bytes!=0)
-		 {
-			  module_len=module_len<<8;
-			  module_len+=*p++;
-			  --len_bytes;
-		 }
+ 		u8 len_bytes = (*(p - 1)) & 0x0f;
+		size_t module_len = 0;
+		if ((size_t)(p - rbuf) + len_bytes >= plen) {
+			SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
+		}
+		while (len_bytes != 0)
+		{
+			module_len = module_len << 8;
+			module_len += *p++;
+			--len_bytes;
+		}
 	}
 
-	entersafe_reverse_buffer(p,len);
-	memcpy(data->modulus,p,len);
+	if ((p - rbuf) + len >= plen) {
+			SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_INVALID_DATA);
+	}
+	data->modulus = malloc(len);
+	if (!data->modulus)
+		SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_OUT_OF_MEMORY);
+	entersafe_reverse_buffer(p, len);
+	memcpy(data->modulus, p, len);
 
-	SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE,SC_SUCCESS);
+	SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_SUCCESS);
 }
 
 static int entersafe_get_serialnr(sc_card_t *card, sc_serial_number_t *serial)
-- 
2.25.1

